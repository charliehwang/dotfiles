# If you come from bash you might have to change your $PATH.
# export PATH=/opt/homebrew/bin:$HOME/bin:/usr/local/sbin:/usr/local/bin:$PATH 
export PATH=$HOME/bin:/usr/local/sbin:/usr/local/bin:$PATH
export NODE_EXTRA_CA_CERTS=~/.ssh/zscaler-root-cert.pem

#export PATH="/var/folders/pv/ms_d50dj1r59zk7s4zm_ds0r0000gn/T/fnm_multishells/9221_1633209345821/bin":$PATH
#export FNM_MULTISHELL_PATH="/var/folders/pv/ms_d50dj1r59zk7s4zm_ds0r0000gn/T/fnm_multishells/9221_1633209345821"
#export FNM_DIR="/Users/charlie/.fnm"
#export FNM_LOGLEVEL="info"
#export FNM_NODE_DIST_MIRROR="https://nodejs.org/dist"
#export FNM_ARCH="x64"

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="agnoster"

DEFAULT_USER="$(whoami)"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git vi-mode cp zsh-autosuggestions zsh-z)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
   export VISUAL=vim
   export EDITOR="$VISUAL"
# else
#   export EDITOR='mvim'
#   export VISUAL=vim
#   export EDITOR="$VISUAL"
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


############################################################
EDITOR="vim"
export CONFIG_DIR=/Volumes/Tree/Projects/config

# iCloud Dir
ic=/Users/charlieh/Library/Mobile\ Documents/com~apple~CloudDocs/

alias src='source ~/.zshrc'

alias lla='ls -la'

alias cdx='cd /Volumes/Trading/TradeWithMrX/'
alias cddc='cd /Volumes/Tree/Cloud/OneDrive/Projects/JS/dailyCapture'
alias cdp='cd /Volumes/Tree/Projects/'
alias cda='cd /Volumes/Tree/Projects/Apple'
alias cds='cd /Volumes/Tree/Projects/Apple/Sandbox'
alias cdp='cdWithPossibleSubDir /Volumes/Tree/Projects $@'
alias cdd='cdWithPossibleSubDir /Volumes/Tree/Projects/Docker $@'
alias cdjs='cdWithPossibleSubDir /Volumes/Tree/Projects/JS $@'
#alias cdi='cdWithPossibleSubDir /Users/charlieh/Library/Mobile\ Documents/com~apple~CloudDocs/ $@'
alias cdi='cdWithPossibleSubDir $ic $@'

alias h='pkill Hammer; /Applications/Hammerspoon.app/Contents/MacOS/Hammerspoon &'
alias ibrew='arch -x86_64 /usr/local/bin/brew'

alias jw='export LOG_LEVEL=debug &&  jest --no-cache --watch $@'
alias jd='export LOG_LEVEL=debug &&  /usr/local/bin/node --inspect-brk=24935 node_modules/.bin/jest "--no-cache --watch" jest $@ --runInBand'
alias logd='export LOG_LEVEL=debug'

alias dservers='ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@localhost -p 7122 $@' 
alias drestart='docker restart $(docker ps -q)' 
# cd /Volumes/Tree/Projects/JS/Jarvis/Watson ; /usr/local/bin/node --inspect-brk=24935 node_modules/.bin/jest "--no-cache --watch" /Volumes/Tree/Projects/JS/Jarvis/Watson/src/components/__tests__/index.test.tsx  --runInBand 

alias cyp='./node_modules/.bin/cypress open'

alias g='git $@'
alias ga='git add $@'
alias gc='git commit -m $@'
alias gl='git log'
alias gs='git status'
alias gca='git commit -am $@'
alias gpush='git push'
alias gpull='git pull'
alias gcap='gitCommitAndPush $@'
alias gplall='ls | xargs -P10 -I{} git -C {} pull'

alias kc='kubectl'

# alias s='cat ~/.ssh/docker.key | ssh -tt docker "sudo systemctl suspend"'
# alias dstop='ssh docker "docker stop tos_positions tos_watch ib crypto"; ssh kubo -t "sudo /usr/local/bin/docker stop tos_charts"'
# alias dstart='ssh docker "docker start tos_positions tos_watch ib crypto"; ssh kubo -t "sudo /usr/local/bin/docker start tos_charts"'
alias dstats='ssh docker "docker stats"'

alias sjarvis='ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" root@jarvisdev -p 7122'

alias ta='tmux attach-session -t $@'
alias tn='tmux new-session -t $@'

alias y='youtube-dl $@'

function gitCommitAndPush() {
	git add .
	git commit -am $1
	git push
}

function cdWithPossibleSubDir() {
  mainDir=$1
  subDir=$2
  cd $mainDir
  if [[ -d $subDir ]]; then
    cd $subDir
  fi
}

function mkcd () {
  mkdir -p "$1"
  cd "$1"
}

function rerun() {
	 
    CMD=$@
	 for i in {1..1000000}; do . ~/.zshrc && $CMD && break || sleep 5; done
}

# SSH
# ssh without any checking or saving 
function sshno() {
    HOST=$1
    PORT=$2
    ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" $HOST -p ${PORT:-22}
}
# ssh using tmux session
function smux() {
    HOST=$1
    TMUX_SESSION_NAME=${2:-all}
    while true; do ssh $HOST -t "tmux new-session -t $TMUX_SESSION_NAME" ; echo "Waiting to connect..."; sleep 3; done
}

# Docker
function dexec() {
    CONTAINER_NAME=$1
    EXE=$2
    docker exec -it $(docker ps --format '{{.Names}}' | grep $CONTAINER_NAME) ${EXE:-bash} 
}
function dlogs() {
    CONTAINER_NAME=$1
    SINCE=$2
    docker logs -f --since ${SINCE:-1h} $(docker ps --format '{{.Names}}' | grep $CONTAINER_NAME) | colored.pl
}
function dps() {
	docker ps --format '{{.Names}}' | sort -u -k1
} 
function dsupdate() {
    CONTAINER_NAME=$1
    DOCKER_ENV=$2
	docker service update --env-add ${DOCKER_ENV:-DAEMON_DISABLE=enable} $(docker service ls --format '{{.Name}}' | grep $CONTAINER_NAME)
}
function dsinspect() {
    CONTAINER_NAME=$1
    DOCKER_ENV=$2
	docker service inspect --format='{{.Spec.TaskTemplate.ContainerSpec.Env}}' $(docker service ls --format '{{.Name}}' | grep $CONTAINER_NAME)
}

# Sync
function sync-settings() {
	#HOSTS_ARRAY=("orizportalp03" "orizportalp01" "orizportald01" "orizwebd01")
	#HOSTS_ARRAY=("172.16.100.74")
	HOSTS_ARRAY=("aura.local")
	for host in $HOSTS_ARRAY; do
		scp -rp .zshrc* .oh-my* .tmux* ~/bin charlie@$host:~
	done
}

SAVEHIST=10000 # Number of entries
HISTSIZE=10000
HISTFILE=~/.zsh_history

unsetopt inc_append_history
unsetopt share_history
setopt appendhistory

# https://github.com/zsh-users/zsh-autosuggestions
# ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#ff00ff,bg=cyan,bold,underline"
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#353535"
bindkey '^ ' autosuggest-accept

# ZSH-Z
ZSHZ_CMD=j

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# tabtab source for electron-forge package
# uninstall by removing these lines or running `tabtab uninstall electron-forge`
[[ -f /Volumes/Tree/Projects/JS/StockChartsQuadView/node_modules/tabtab/.completions/electron-forge.zsh ]] && . /Volumes/Tree/Projects/JS/StockChartsQuadView/node_modules/tabtab/.completions/electron-forge.zsh

